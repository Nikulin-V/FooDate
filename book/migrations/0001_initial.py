# Generated by Django 4.0.5 on 2022-06-26 19:25

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import re
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProductCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('name', models.CharField(max_length=255, null=True, verbose_name='Наименование')),
                ('slug', models.CharField(max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
                ('shelf_life', models.DurationField(null=True, verbose_name='Срок годности')),
                ('shelf_life_after_opening', models.DurationField(null=True, verbose_name='Срок годности')),
                ('storage_temperature', models.FloatField(null=True, verbose_name='Температура хранения')),
                ('storage_temperature_unit', models.CharField(choices=[('℃', 'градус Цельсия'), ('℉', 'градус Фаренгейта'), ('K', 'Кельвин')], max_length=3, null=True, verbose_name='Единица измерения температуры хранения')),
                ('composition', models.CharField(max_length=1023, null=True, verbose_name='Состав')),
                ('energy_value', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Энергетическая ценность')),
                ('energy_value_unit', models.CharField(choices=[('ккал', 'килокалории'), ('кДж', 'килоджоули')], max_length=4, null=True, verbose_name='Единица измерения энергетической ценности')),
            ],
            options={
                'verbose_name': 'Карточка продукта',
                'verbose_name_plural': 'Карточки продуктов',
            },
            managers=[
                ('cards', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('slug', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
            ],
            options={
                'verbose_name': 'Категория продуктов',
                'verbose_name_plural': 'Категории продуктов',
            },
            managers=[
                ('categories', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProductSubcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('slug', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
            ],
            options={
                'verbose_name': 'Подкатегория продуктов',
                'verbose_name_plural': 'Подкатегории продуктов',
            },
            managers=[
                ('subcategories', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='RecipeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('slug', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
            ],
            options={
                'verbose_name': 'Категория рецептов',
                'verbose_name_plural': 'Категории рецептов',
            },
            managers=[
                ('categories', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.CharField(max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
                ('people_count', models.IntegerField(default=1, help_text='Количество человек, на которое рассчитано блюдо', verbose_name='Кол-во человек')),
                ('ingredients', tinymce.models.HTMLField(help_text='Напишите список ингредиентов и сколько их понадобится', verbose_name='Ингредиенты')),
                ('energy_value', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Энергетическая ценность')),
                ('energy_value_unit', models.CharField(choices=[('ккал', 'килокалории'), ('кДж', 'килоджоули')], max_length=4, null=True, verbose_name='Единица измерения энергетической ценности')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='book.recipecategory', verbose_name='Категория рецептов')),
                ('products', models.ManyToManyField(related_name='recipes', to='book.productcard', verbose_name='Продукты для рецепта')),
            ],
            options={
                'verbose_name': 'Рецепт',
                'verbose_name_plural': 'Рецепты',
            },
            managers=[
                ('recipes', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='productcard',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='book.productcategory', verbose_name='Категория продуктов'),
        ),
        migrations.AddField(
            model_name='productcard',
            name='subcategory',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='book.productsubcategory', verbose_name='Подкатегория продуктов'),
        ),
    ]
