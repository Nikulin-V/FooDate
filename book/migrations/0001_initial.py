# Generated by Django 4.0.5 on 2022-08-25 12:29

import core.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_quill.fields
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ProductCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('slug', models.CharField(blank=True, max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('designation', models.CharField(max_length=255, verbose_name='Наименование')),
                ('shelf_life', models.DurationField(blank=True, help_text='Период времени в формате (дни часы:минуты:секунды)', null=True, verbose_name='Срок годности')),
                ('shelf_life_after_opening', models.DurationField(blank=True, help_text='Период времени в формате (дни часы:минуты:секунды)', null=True, verbose_name='Срок годности после вскрытия')),
                ('min_storage_temperature', models.FloatField(blank=True, null=True, verbose_name='Минимальная температура хранения')),
                ('max_storage_temperature', models.FloatField(blank=True, null=True, verbose_name='Максимальная температура хранения')),
                ('storage_temperature_unit', models.CharField(choices=[('℃', '℃'), ('℉', '℉'), ('K', 'K')], default=('℃', '℃'), max_length=3, verbose_name='Единица измерения температуры хранения')),
                ('composition', models.TextField(blank=True, max_length=1023, null=True, verbose_name='Состав')),
                ('energy_value', models.FloatField(blank=True, help_text='Энергетическая ценность на 100 грамм продукта', null=True, validators=[core.validators.BiggerThanValidator(0)], verbose_name='Энергетическая ценность')),
                ('energy_value_unit', models.CharField(choices=[('ккал', 'ккал'), ('кДж', 'кДж')], default=('ккал', 'ккал'), max_length=4, verbose_name='Единица измерения энергетической ценности')),
                ('proteins', models.FloatField(blank=True, null=True, validators=[core.validators.BiggerThanValidator(0)], verbose_name='Белки (в граммах)')),
                ('fats', models.FloatField(blank=True, null=True, validators=[core.validators.BiggerThanValidator(0)], verbose_name='Жиры (в граммах)')),
                ('carbohydrates', models.FloatField(blank=True, null=True, validators=[core.validators.BiggerThanValidator(0)], verbose_name='Углеводы (в граммах)')),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/images', verbose_name='Изображение продукта')),
            ],
            options={
                'verbose_name': 'Карточку продукта',
                'verbose_name_plural': 'Карточки продуктов',
            },
            managers=[
                ('cards', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('slug', models.CharField(blank=True, max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
            ],
            options={
                'verbose_name': 'Категорию продуктов',
                'verbose_name_plural': 'Категории продуктов',
            },
            managers=[
                ('categories', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('slug', models.CharField(blank=True, max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
                ('people_count', models.IntegerField(default=1, help_text='Количество человек, на которое рассчитано блюдо', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Кол-во человек, на которое рассчитано блюдо')),
                ('recipe', django_quill.fields.QuillField(help_text='Подробно опишите процесс приготовления по шагам', verbose_name='Рецепт')),
                ('energy_value', models.FloatField(blank=True, null=True, validators=[core.validators.BiggerThanValidator(0)], verbose_name='Энергетическая ценность')),
                ('energy_value_unit', models.CharField(blank=True, choices=[('ккал', 'ккал'), ('кДж', 'кДж')], max_length=4, null=True, verbose_name='Единица измерения энергетической ценности')),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipes/images', verbose_name='Изображение блюда')),
            ],
            options={
                'verbose_name': 'Рецепт',
                'verbose_name_plural': 'Рецепты',
            },
            managers=[
                ('recipes', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='RecipeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('slug', models.CharField(blank=True, max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
            ],
            options={
                'verbose_name': 'Категорию рецептов',
                'verbose_name_plural': 'Категории рецептов',
            },
            managers=[
                ('categories', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='RecipePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('upload', models.ImageField(blank=True, null=True, upload_to='recipes/gallery')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='book.recipe', verbose_name='Рецепт')),
            ],
            options={
                'verbose_name': 'Изображение блюда',
                'verbose_name_plural': 'Изображения блюда',
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recipes', to='book.recipecategory', verbose_name='Категория рецептов'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='gallery',
            field=models.ManyToManyField(related_name='products', to='book.recipephoto', verbose_name='Фотографии'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='products',
            field=models.ManyToManyField(related_name='recipes', to='book.productcard', verbose_name='Продукты, необходимые для приготовления'),
        ),
        migrations.CreateModel(
            name='ProductSubcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Название')),
                ('slug', models.CharField(blank=True, max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid')])),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='book.productcategory', verbose_name='Категория продуктов')),
            ],
            options={
                'verbose_name': 'Подкатегорию продуктов',
                'verbose_name_plural': 'Подкатегории продуктов',
            },
            managers=[
                ('subcategories', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProductPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('upload', models.ImageField(blank=True, null=True, upload_to='products/gallery')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='book.productcard', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Изображение продукта',
                'verbose_name_plural': 'Изображения продукта',
            },
        ),
        migrations.AddField(
            model_name='productcard',
            name='gallery',
            field=models.ManyToManyField(related_name='product_cards', to='book.productphoto', verbose_name='Фотографии'),
        ),
        migrations.AddField(
            model_name='productcard',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='product_cards', to='book.productsubcategory', verbose_name='Подкатегория продуктов'),
        ),
    ]
